name: CI Pipeline


on:
  push:
    branches: [ main, End-to-End-Unit-Testing ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies with rollup fix
        run: |
          npm ci --force || (
            echo "npm ci failed, applying rollup fix..."
            rm -rf node_modules package-lock.json
            npm install
          )

      - name: Run unit tests
        run: npm run test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: coverage/
          retention-days: 30
          if-no-files-found: warn

  # E2E Tests with Playwright
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    env:
      VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies with rollup fix
        run: |
          npm ci --force || (
            echo "npm ci failed, applying rollup fix..."
            rm -rf node_modules package-lock.json
            npm install
          )

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create .env file
        run: |
          echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" > .env

      - name: Build applications
        run: |
          npm run build:api
          npm run build:frontend

      - name: Start applications for testing
        run: |
          npm run start:api &
          npm run start:frontend &
          sleep 10
        timeout-minutes: 2

      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Cleanup processes
        if: always()
        run: |
            if [ ! -z "$API_PID" ]; then kill $API_PID || true; fi
            if [ ! -z "$FRONTEND_PID" ]; then kill $FRONTEND_PID || true; fi


      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Build check
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    
    env:
      VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies with rollup fix
        run: |
          npm ci --force || (
            echo "npm ci failed, applying rollup fix..."
            rm -rf node_modules package-lock.json
            npm install
          )

      - name: Create .env file
        run: |
          echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" > .env

      - name: Build all applications
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            apps/frontend/dist/
            apps/api/dist/
          retention-days: 7

  # Success notification
  notify-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, build-check]
    if: success()
    
    steps:
      - name: Success notification
        run: |
          echo "âœ… All tests passed!"
          echo "âœ… Unit tests completed"
          echo "âœ… E2E tests completed"
          echo "âœ… Build check completed"
          echo "ðŸš€ Ready for deployment when you're ready!"